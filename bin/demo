#!/usr/bin/env ruby

require "bundler/setup"
require "spreadshit"
require "spreadshit/window"

sheet = Spreadshit.new
[
  "Sum",
  10,
  20,
  30,
  "",
  "=A2 + A3 + A4",
  "=SUM(A2; A3; A4)",
  "=SUM(A2:A4)"
].each_with_index do |cel, index|
  sheet["A#{index + 1}"] = cel
end

# Fibonacci
sheet[:B1] = "Fibonacci"
sheet[:B2] = 0
sheet[:B3] = 1
4.upto(30).each do |n|
  sheet["B#{n}"] = "=B#{n - 1} + B#{n - 2}"
end

# Cyclic
sheet[:C1] = "Cyclic"
sheet[:C2] = 1
3.upto(20).each do |n|
  sheet["C#{n}"] = "=C#{n - 1} + 1"
end
sheet[:C2] = "=C20"

window = Spreadshit::Window.new do |delegate|
  delegate.cell_updated { |address, value| sheet[address] = value }
  delegate.cell_value do |address|
    value = sheet[address]

    case value
      when Spreadshit::Formula::CyclicDependency
        Spreadshit::Window::ReferenceError.new("Circular reference #{value.address}")
      when Numeric
        if value.to_f.nan?
          Spreadshit::Window::ValueError.new("Value cannot be coerced to number")
        else
          value
        end
      else
        value.to_s
    end
  end
  delegate.cell_content { |address| sheet.raw(address).to_s }
  delegate.cell_dependents { |address| sheet.cell(address).send(:observers).map(&:address) }
  delegate.cell_dependencies { |address| sheet.cell(address).send(:dependencies).map(&:address) }
end
window.start
